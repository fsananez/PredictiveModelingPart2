tr = sample(1:506, 400)
train = train[tr,]
test = test[-tr,]
out_MSE = NULL
for(i in 2:350)
{
near = kknn(medv~lstat, train, test, k = i, kernel = "rectangular")
aux = mean((test[,2] - near$fitted)^2)
out_MSE = c(out_MSE,aux)
}
best = which.min(out_MSE)
train = data.frame(lstat, medv)
test = data.frame(lstat, medv)
tr = sample(1:506, 400)
train = train[tr,]
test = test[-tr,]
out_MSE = NULL
for(i in 2:350)
{
near = kknn(medv~lstat, train, test, k = i, kernel = "rectangular")
aux = mean((test[,2] - near$fitted)^2)
out_MSE = c(out_MSE,aux)
}
best = which.min(out_MSE)
train = data.frame(lstat, medv)
test = data.frame(lstat, medv)
tr = sample(1:506, 400)
train = train[tr,]
test = test[-tr,]
out_MSE = NULL
for(i in 2:350)
{
near = kknn(medv~lstat, train, test, k = i, kernel = "rectangular")
aux = mean((test[,2] - near$fitted)^2)
out_MSE = c(out_MSE,aux)
}
best = which.min(out_MSE)
best
Data = read.table("RunsPerGame.txt",header=T)
attach(Data)
library(MASS) ## a library of example datasets
library(class) ## a library with lots of classification tools
library(kknn) ## knn library
attach(Boston)
n = dim(Boston)[1]
plot(lstat,medv)
train = data.frame(lstat, medv)
test = data.frame(lstat, medv)
tr = sample(1:506, 400)
train = train[tr,]
test = test[-tr,]
out_MSE = NULL
for(i in 2:350)
{
near = kknn(medv~lstat, train, test, k = i, kernel = "rectangular")
aux = mean((test[,2] - near$fitted)^2)
out_MSE = c(out_MSE,aux)
}
best = which.min(out_MSE)
best
plot(log(1/(2:350)), sqrt(out_MSE), xlab = "Complexity (log(1/k))",ylab="out-of-sample RMSE",col=4,lwd=2,type="l",cex.lab=1.2)
text(log(1/best),sqrt(out_MSE[best])+0.3,paste("k=",best),col=2,cex=1.2)
text(log(1/2),sqrt(out_MSE[2]),paste("k=",2),col=2,cex=1.2)
text(log(1/354)+0.4,sqrt(out_MSE[345]),paste("k=",345),col=2,cex=1.2)
near = kknn(medv~lstat,train,test,k=42,kernel = "rectangular")
ind = order(test[,1])
plot(lstat,medv,main=paste("k=",42),pch=19,cex=0.8,col="darkgray")
lines(test[ind,1],near$fitted[ind],col=2,lwd=2)
train = data.frame(lstat, medv)
test = data.frame(lstat, medv)
tr = sample(1:506, 400)
train = train[tr,]
test = test[-tr,]
out_MSE = NULL
for(i in 2:350)
{
near = kknn(medv~lstat, train, test, k = i, kernel = "rectangular")
aux = mean((test[,2] - near$fitted)^2)
out_MSE = c(out_MSE,aux)
}
best = which.min(out_MSE)
best
plot(log(1/(2:350)), sqrt(out_MSE), xlab = "Complexity (log(1/k))",ylab="out-of-sample RMSE",col=4,lwd=2,type="l",cex.lab=1.2)
text(log(1/best),sqrt(out_MSE[best])+0.3,paste("k=",best),col=2,cex=1.2)
text(log(1/2),sqrt(out_MSE[2]),paste("k=",2),col=2,cex=1.2)
text(log(1/354)+0.4,sqrt(out_MSE[345]),paste("k=",345),col=2,cex=1.2)
near = kknn(medv~lstat,train,test,k=best,kernel = "rectangular")
ind = order(test[,1])
plot(lstat,medv,main=paste("k=",best),pch=19,cex=0.8,col="darkgray")
lines(test[ind,1],near$fitted[ind],col=2,lwd=2)
rm(list=ls())
library(MASS) ## a library of example datasets
library(class) ## a library with lots of classification tools
library(kknn) ## knn library
attach(Boston)
n = dim(Boston)[1]
n
?plot
source('Files/car_setup.txt')
library(randomForest)
source('Predictive Modeling Project/Files/car_setup.txt')
library(randomForest)
source('PM_Project/Files/car_setup.txt')
library(randomForest)
getwd()
getwd()
setwd('/R')
source('PM_Project/Files/car_setup.txt')
library(randomForest)
getwd()
source('/PM_Project/Files/car_setup.txt')
getwd()
auto = read.csv("Auto.csv", header = T, na.strings = "?")
fix(auto)
auto = read.csv("Auto.csv", header = T, na.strings = "?")
fix(auto)
dim(auto)
auto = read.csv("Auto.data", header = T, na.strings = "?")
fix(auto)
dim(auto)
auto = read.csv("Auto.data")
auto
auto = read.table("Auto.data",header = T, na.strings = "?")
auto = read.csv("Auto.csv",header = T, na.strings = "?")
fix(auto)
dim(auto)
auto[1:4,]
auto[1:4,]
auto = na.omit(auto)
names(auto)
plot(auto$cylinders, auto$mpg)
auto$cylinders = as.factor(auto$cylinders)
plot(auto$cylinders,auto$mpg)
plot(auto$cylinders,auto$mpg, col = "red")
plot(auto$cylinders,auto$mpg, col = "red", varwidth = T)
plot(auto$cylinders,auto$mpg, col = "red", varwidth = T, horizontal = T)
plot(auto$cylinders,auto$mpg, col = "red", varwidth = T, xlab = "cylinders", ylab = "MPG")
hist(auto$mpg)
hist(auto$mpg, col = 2)
hist(auto$mpg, col = 4)
hist(auto$mpg, col = 4.5)
hist(auto$mpg, col = 4, breaks =15)
hist(auto$mpg, col = 4)
hist(auto$mpg, col = 4)
hist(auto$mpg, col = 4, breaks =15)
hist(auto$mpg, col = 4)
?hist
pairs(auto)
pairs(~ auto$mpg + auto$displacement + auto$horsepower + auto$weight + auto$acceleration, auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, auto)
plot(auto$horsepower, auto$mpg)
identify(auto$horsepower, auto$mpg, name)
identify(auto$horsepower, auto$mpg, auto$name)
summary(auto)
plot(auto$mpg)
q()
college = read.csv("College.csv", header = T)
fix(college)
dim(college)
rownames(college) = college[,1]
fix(college)
college = college[,-1]
fix(college)
summary(college)
pairs(college)
pairs(college[,1:10])
plot(college$Outstate,college$Private)
college$Private = as.factor(college$Private)
plot(college$Outstate,college$Private)
plot(college$private, college$Outstate)
dim(college$Private)
college$Private
boxplot(college$Private, college$Outstate)
library(mosaic)
library(foreach)
library(fImport)
library(flexclust)
library(fpc)
library(PerformanceAnalytics)
Georgia_Counties <- read.csv("georgia2000.csv")
head(Georgia_Counties)
summary(Georgia_Counties)
setwd("~/Documents/PredictiveModelingPart2")
Georgia_Counties <- read.csv("georgia2000.csv")
head(Georgia_Counties)
summary(Georgia_Counties)
Georgia_Counties$Undercount = (Georgia_Counties$ballots - Georgia_Counties$votes) / Georgia_Counties$ballots
plot(Georgia_Counties$equip,Georgia_Counties$Undercount)
par(mfrow=c(2,2))
freq_tab = table(as.factor(Georgia_Counties$poor[Georgia_Counties$equip == "LEVER"]))
barplot(freq_tab[freq_tab>=0], main = "Lever", xlab = "Poor")
freq_tab = table(as.factor(Georgia_Counties$poor[Georgia_Counties$equip == "OPTICAL"]))
barplot(freq_tab[freq_tab>=0], main = "Optical", xlab = "Poor")
freq_tab = table(as.factor(Georgia_Counties$poor[Georgia_Counties$equip == "PAPER"]))
barplot(freq_tab[freq_tab>=0], main = "Paper", xlab = "Poor")
freq_tab = table(as.factor(Georgia_Counties$poor[Georgia_Counties$equip == "PUNCH"]))
barplot(freq_tab[freq_tab>=0], main = "Punch", xlab = "Poor")
stocks = c("SPY","TLT","LQD","EEM","VNQ")
prices = yahooSeries(stocks, from='2010-01-01', to='2015-08-02')
investment = 100000
YahooPricesToReturns = function(series)
{
mycols = grep('Adj.Close', colnames(series))
closingprice = series[,mycols]
N = nrow(closingprice)
percentreturn = as.data.frame(closingprice[2:N,]) / as.data.frame(closingprice[1:(N-1),]) - 1
mynames = strsplit(colnames(percentreturn), '.', fixed=TRUE)
mynames = lapply(mynames, function(x) return(paste0(x[1], ".PctReturn")))
colnames(percentreturn) = mynames
as.matrix(na.omit(percentreturn))
}
returns = YahooPricesToReturns(prices)
returns
# Import the ETfs data, Inicializing variables
stocks = c("SPY","TLT","LQD","EEM","VNQ")
prices = yahooSeries(stocks, from='2010-01-01', to='2015-08-02')
investment = 100000
# Helper Function
YahooPricesToReturns = function(series)
{
mycols = grep('Adj.Close', colnames(series))
closingprice = series[,mycols]
N = nrow(closingprice)
percentreturn = as.data.frame(closingprice[2:N,]) / as.data.frame(closingprice[1:(N-1),]) - 1
mynames = strsplit(colnames(percentreturn), '.', fixed=TRUE)
mynames = lapply(mynames, function(x) return(paste0(x[1], ".PctReturn")))
colnames(percentreturn) = mynames
as.matrix(na.omit(percentreturn))
}
returns = YahooPricesToReturns(prices)
# Risk/Return Porperty for each Stock, Weighted Portfolio
risk_return = round((apply(returns, 2, mean)/ apply(returns, 2, sd))*100,digits=2)
qplot(apply(returns, 2, sd), (apply(returns, 2, mean)))
plot(apply(returns, 2, sd), (apply(returns, 2, mean)))
apply(returns, 2, sd
apply(returns, 2, sd)
return_mean = apply(returns, 2, mean)
return_sd = apply(returns, 2, sd)
risk_return = round((return_mean/ return_sd)*100,digits=2)
library(mosaic)
library(foreach)
library(fImport)
library(flexclust)
library(fpc)
library(PerformanceAnalytics)
qplot(return_sd, return_mean)
names(return_mean)
qplot(return_sd, return_mean, label=names(return_mean))
plot(), ())
qplot(return_sd, return_mean, label=names(return_mean), geom="text")
qplot(return_sd, return_mean, label=names(return_mean), geom=c("point","text")
qplot(return_sd, return_mean, label=names(return_mean), geom=c("point","text"))
stocks = c("SPY","TLT","LQD","EEM","VNQ")
prices = yahooSeries(stocks, from='2010-01-01', to='2015-08-02')
investment = 100000
YahooPricesToReturns = function(series)
{
mycols = grep('Adj.Close', colnames(series))
closingprice = series[,mycols]
N = nrow(closingprice)
percentreturn = as.data.frame(closingprice[2:N,]) / as.data.frame(closingprice[1:(N-1),]) - 1
mynames = strsplit(colnames(percentreturn), '.', fixed=TRUE)
mynames = lapply(mynames, function(x) return(paste0(x[1], ".PctReturn")))
colnames(percentreturn) = mynames
as.matrix(na.omit(percentreturn))
}
returns = YahooPricesToReturns(prices)
return_mean = apply(returns, 2, mean)
return_sd = apply(returns, 2, sd)
risk_return = round((return_mean/ return_sd)*100,digits=2)
qplot(return_sd, return_mean, label=names(return_mean), geom=c("point","text"))
even = c(0.2,0.2,0.2,0.2,0.2)
aggre = c(0.45,0.25,0.05,0.10,0.15)
safe = c(0.25,0.25,0.50,0.0,0.05)
# Even Portfolio Bootstrap Simulation
set.seed(101)
even_bootstrap = foreach(i = 1:5000, .combine = 'rbind') %do%
{
holdings = even*investment
days = 20
wealth_tracker = 1:days
for (today in 1:days)
{
todays_returns = resample(returns, 1, orig.ids = FALSE)
holdings = holdings + holdings*todays_returns
wealth = sum(holdings)
wealth_tracker[today] = wealth
}
wealth_tracker
}
# Aggresive Portfolio Bootstrap Simulation
set.seed(202)
aggre_bootstrap = foreach(i = 1:5000, .combine = 'rbind') %do%
{
holdings = aggre*investment
days = 20
wealth_tracker = 1:days
for (today in 1:days)
{
todays_returns = resample(returns, 1, orig.ids = FALSE)
holdings = holdings + holdings*todays_returns
wealth = sum(holdings)
wealth_tracker[today] = wealth
}
wealth_tracker
}
# Safe Portfolio Bootstrap Simulation
set.seed(303)
safe_bootstrap = foreach(i = 1:5000, .combine = 'rbind') %do%
{
holdings = safe*investment
days = 20
wealth_tracker = 1:days
for (today in 1:days)
{
todays_returns = resample(returns, 1, orig.ids = FALSE)
holdings = holdings + holdings*todays_returns
wealth = sum(holdings)
wealth_tracker[today] = wealth
}
wealth_tracker
}
#Even Portfolio 5% Value at Risk
quantile(even_bootstrap[,days],0.05)
#Aggresive Portfolio 5% Value at Risk
quantile(aggre_bootstrap[,days],0.05)
#Safe Portfolio 5% Value at Risk
quantile(safe_bootstrap[,days], 0.05)
even = c(0.2,0.2,0.2,0.2,0.2)
aggre = c(0.45,0.25,0.05,0.10,0.15)
safe = c(0.25,0.25,0.50,0.0,0.05)
# Even Portfolio Bootstrap Simulation
set.seed(101)
even_bootstrap = foreach(i = 1:5000, .combine = 'rbind') %do%
{
holdings = even*investment
days = 20
wealth_tracker = 1:days
for (today in 1:days)
{
todays_returns = resample(returns, 1, orig.ids = FALSE)
holdings = holdings + holdings*todays_returns
wealth = sum(holdings)
wealth_tracker[today] = wealth
}
wealth_tracker
}
# Aggresive Portfolio Bootstrap Simulation
set.seed(202)
aggre_bootstrap = foreach(i = 1:5000, .combine = 'rbind') %do%
{
holdings = aggre*investment
days = 20
wealth_tracker = 1:days
for (today in 1:days)
{
todays_returns = resample(returns, 1, orig.ids = FALSE)
holdings = holdings + holdings*todays_returns
wealth = sum(holdings)
wealth_tracker[today] = wealth
}
wealth_tracker
}
# Safe Portfolio Bootstrap Simulation
set.seed(303)
safe_bootstrap = foreach(i = 1:5000, .combine = 'rbind') %do%
{
holdings = safe*investment
days = 20
wealth_tracker = 1:days
for (today in 1:days)
{
todays_returns = resample(returns, 1, orig.ids = FALSE)
holdings = holdings + holdings*todays_returns
wealth = sum(holdings)
wealth_tracker[today] = wealth
}
wealth_tracker
}
#Even Portfolio 5% Value at Risk
quantile(even_bootstrap[,days],0.05)
#Aggresive Portfolio 5% Value at Risk
quantile(aggre_bootstrap[,days],0.05)
#Safe Portfolio 5% Value at Risk
quantile(safe_bootstrap[,days], 0.05)
even = c(0.2,0.2,0.2,0.2,0.2)
aggre = c(0.45,0.10,0.05,0.25,0.15)
safe = c(0.25,0.25,0.50,0.0,0.05)
# Even Portfolio Bootstrap Simulation
set.seed(101)
even_bootstrap = foreach(i = 1:5000, .combine = 'rbind') %do%
{
holdings = even*investment
days = 20
wealth_tracker = 1:days
for (today in 1:days)
{
todays_returns = resample(returns, 1, orig.ids = FALSE)
holdings = holdings + holdings*todays_returns
wealth = sum(holdings)
wealth_tracker[today] = wealth
}
wealth_tracker
}
# Aggresive Portfolio Bootstrap Simulation
set.seed(202)
aggre_bootstrap = foreach(i = 1:5000, .combine = 'rbind') %do%
{
holdings = aggre*investment
days = 20
wealth_tracker = 1:days
for (today in 1:days)
{
todays_returns = resample(returns, 1, orig.ids = FALSE)
holdings = holdings + holdings*todays_returns
wealth = sum(holdings)
wealth_tracker[today] = wealth
}
wealth_tracker
}
# Safe Portfolio Bootstrap Simulation
set.seed(303)
safe_bootstrap = foreach(i = 1:5000, .combine = 'rbind') %do%
{
holdings = safe*investment
days = 20
wealth_tracker = 1:days
for (today in 1:days)
{
todays_returns = resample(returns, 1, orig.ids = FALSE)
holdings = holdings + holdings*todays_returns
wealth = sum(holdings)
wealth_tracker[today] = wealth
}
wealth_tracker
}
#Even Portfolio 5% Value at Risk
quantile(even_bootstrap[,days],0.05)
#Aggresive Portfolio 5% Value at Risk
quantile(aggre_bootstrap[,days],0.05)
#Safe Portfolio 5% Value at Risk
quantile(safe_bootstrap[,days], 0.05)
wine <- read.csv("wine.csv")
summary(wine)
# Clustering Color
X = wine[,-13]
wine_scaled <- scale(X, center=TRUE, scale=TRUE)
set.seed(101)
cluster_all_prop <- kmeans(wine_scaled, centers=2, nstart=5)
crosstabulate = table(wine$color, cluster_all_prop$cluster)
randIndex(crosstabulate)
plotcluster(wine_scaled, cluster_all_prop$cluster)
par(mfrow=c(1,1))
plotcluster(wine_scaled, cluster_all_prop$cluster)
pc2 = prcomp(X, scale=TRUE)
loadings = pc2$rotation
scores = pc2$x
qplot(scores[,1], scores[,2], color=wine$color, xlab='Component 1', ylab='Component 2')
X = wine[,-(12:13)]
wine_scaled <- scale(X, center=TRUE, scale=TRUE)
set.seed(101)
cluster_all_prop <- kmeans(wine_scaled, centers=7, iter.max=30, nstart=5)
cluster_all_prop$size
crosstabulate = table(wine$quality, cluster_all_prop$cluster)
randIndex(crosstabulate)
plotcluster(wine_scaled, cluster_all_prop$cluster)
# PCA on Quality
pc2 = prcomp(X, scale=TRUE)
loadings = pc2$rotation
scores = pc2$x
qplot(scores[,1], scores[,2], color=wine$quality, xlab='Component 1', ylab='Component 2')
twitter <- read.csv("social_marketing.csv")
twitter_scaled <- scale(twitter[,-1], center=TRUE, scale=TRUE)
twitter_distance_matrix = dist(twitter_scaled, method='euclidean')
hier_twitter = hclust(twitter_distance_matrix, method='complete')
interest_clusters = cutree(hier_twitter, k=6)
mask = which(interest_clusters == 1)
masked_clustered = twitter[mask,-1]
cluster =  apply(masked_clustered, 2 , mean)
qplot(names(cluster), cluster, main = "Cluster #1", xlab = "Category", ylab = "Avg Interest")
cluster = subset(cluster, cluster >= 2)
qplot(names(cluster), cluster, main = "Cluster #1", xlab = "Category", ylab = "Avg Interest")
mask = which(interest_clusters == 2)
masked_clustered = twitter[mask,-1]
cluster =  apply(masked_clustered, 2 , mean)
qplot(names(cluster), cluster, main = "Cluster #2", xlab = "Category", ylab = "Avg Interest")
cluster = subset(cluster, cluster >= 1.5)
qplot(names(cluster), cluster, main = "Cluster #2", xlab = "Category", ylab = "Avg Interest")
mask = which(interest_clusters == 3)
masked_clustered = twitter[mask,-1]
cluster =  apply(masked_clustered, 2 , mean)
qplot(names(cluster), cluster, main = "Cluster #3", xlab = "Category", ylab = "Avg Interest")
cluster = subset(cluster, cluster >= 3)
qplot(names(cluster), cluster, main = "Cluster #3", xlab = "Category", ylab = "Avg Interest")
mask = which(interest_clusters == 4)
masked_clustered = twitter[mask,-1]
cluster =  apply(masked_clustered, 2 , mean)
qplot(names(cluster), cluster, main = "Cluster #4", xlab = "Category", ylab = "Avg Interest")
cluster = subset(cluster, cluster >= 3)
qplot(names(cluster), cluster, main = "Cluster #4", xlab = "Category", ylab = "Avg Interest")
mask = which(interest_clusters == 5)
masked_clustered = twitter[mask,-1]
cluster =  apply(masked_clustered, 2 , mean)
qplot(names(cluster), cluster, main = "Cluster #5", xlab = "Category", ylab = "Avg Interest")
cluster = subset(cluster, cluster >= 2)
qplot(names(cluster), cluster, main = "Cluster #5", xlab = "Category", ylab = "Avg Interest")
mask = which(interest_clusters == 6)
masked_clustered = twitter[mask,-1]
cluster =  apply(masked_clustered, 2 , mean)
qplot(names(cluster), cluster, main = "Cluster #6", xlab = "Category", ylab = "Avg Interest")
cluster = subset(cluster, cluster >= 5)
qplot(names(cluster), cluster, main = "Cluster #6", xlab = "Category", ylab = "Avg Interest")
